syntax = "proto3";

option go_package = "github.com/obaraelijah/secureproc/service/jobmanager/jobmanagerv1";

// The jobmanager.v1 package includes the API for the first major
// version of the JobManager API.  This API can be extended with
// non-breaking changes. If breaking changes are required, then
// we can introduce new versions of the API alongside this one to
// maintain backward compatibility.
package jobmanager.v1;

// The JobManager service models the API exposed by the JobManager.
service JobManager {
    // Starts a new job.  The given JobCreationRequest captures the
    // details needed by the service to create the job.  Returns a
    // Job, that will enable further operations on the created job.
    rpc Start(JobCreationRequest)         returns (Job)             {}

    // Terminates a (potentially running) Job by sending it the
    // SIGKILL signal.  If the specified job is no longer running,
    // this function has no effect.
    rpc Stop(JobID)                       returns (NilMessage)      {}

    // Queries the state of the given Job.
    rpc Query(JobID)                      returns (JobStatus)       {}

    // List all jobs and their status.  Possible extensions to this
    // might enable clients to specify a filter to reduce the
    // resulting set.  Depending on the desired scale of the system,
    /// paging might also be desired.
    rpc List(NilMessage)                  returns (JobStatusList)   {}

    // Streams the output of the running job to the client.
    // The stream begins with the initial output generated by the Job
    // and ends when the Job is finished.
    rpc StreamOutput(StreamOutputRequest) returns (stream JobOutput){}
}

// A JobCreationRequest is a message that clients use to request
// the service to create a new Job.  Possible extensions to this
// would enable clients to include additional metadata (e.g., labels)
// to be associated with the newly-created jobs.
message JobCreationRequest {
    // A client-specified name for the job.  The user cannot have
    // any other current job with the same name.
    string name = 1;

    // The path of the program to run 
    string programPath = 2;

    // Arguments to pass to the the program
    repeated string arguments = 3;
}

// A JobID is a message that client use to uniquely identify a job
// managed by the JobManager.
message JobID {
    // A server-assigned UUIDv4 for the job
    string id = 1;
}

// A Job is a message that uniquely identifies one of the Jobs managed
// by the JobManager service.
message Job {
    // The server-assigned ID
    JobID id = 1;

    // The client-specified name for the job
    string name = 2;
}
// The JobStatus message is used to communicate the status of a job.
message JobStatus {
    // The Job with which this status is associated
    Job job = 1;

    // The user who started the job
    string owner = 2;

    // Is the job running?
    bool isRunning = 3;

    // The process ID of the job
    int32 pid = 4;

    // If the job is not running and was terminated by a signal, which
    // signal?  If the process is terminated as a result of the Stop
    // API, then this will indicate the KILL signal (9).  If the
    // process was terminated by an extraneous signal, then this field
    // will indicate the signal number that was received.
    int32 signalNumber = 5;

    // If the job is not running, what was its exit code?
    int32 exitCode = 6;

    // If a job failed to start, what was the cause of the failure?
    string errorMessage = 7;
}

// The JobOutput message is used to stream the output of the command.
// This message can be enhanced in the future to include information
// about the byte offset into the output if this information would
// be useful to clients.
message JobOutput {
    // An array of bytes corresponding to the next “chunk” of command
    // output (either stdout or stderr).
    bytes output = 1;
}

// The JobStatusList message is used to communicate the list of jobs
// managed by the JobManager and their status.
message JobStatusList {
    repeated JobStatus jobStatusList = 1;
}

// The OutputStream enumeration captures the set of output stream
// the JobManager can stream from the process.
enum OutputStream {
    // The unset value
    OutputStream_UNSPECIFIED = 0;

    // Stream the process’ standard output stream
    OutputStream_STDOUT = 1;

    // Stream the process’ standard error stream
    OutputStream_STDERR = 2;
}

// The StreamOutputRequest message is used to request that the service
// stream the output of the job.
message StreamOutputRequest {
    // The server-assigned ID
    JobID jobID = 1;

    // The output stream to return
    OutputStream outputStream = 2;
}

// The NilMessage message is used when no other message is needed.
message NilMessage {}